@model FinalArtsShop.Models.Product

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { @class = "product-form", style = "margin-bottom:50px" }))
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="product-tab-list tab-pane" id="reviews">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3"></div>
                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                    <h2 class="">Edit</h2>
                    <div>
                        @Html.ActionLink("Back to List", "Index")
                    </div>
                    <hr />
                    <div class="review-content-section">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <div class="devit-card-custom">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Id)
                                    <div class="col-lg-12 form-group">
                                        <label class="control-label col-md-2" for="CategoryID">Category</label>
                                        <div class="col-md-10">
                                            @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-lg-12 form-group">
                                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-lg-12 form-group">
                                        @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Unit, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-lg-12 form-group">
                                        @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-lg-12 form-group">
                                        @Html.LabelFor(model => model.PromotionPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.PromotionPrice, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.PromotionPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-lg-12 form-group">
                                        @Html.LabelFor(model => model.Thumbnail, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10 uploaded">
                                            <button type="button" id="upload_widget" class="btn btn-primary">Upload files</button>
                                            @if (Model.GetThubnailIds().Length > 0)
                                            {
                                                <ul class="cloudinary-thumbnails">
                                                    @foreach (var imgId in Model.GetThubnailIds())
                                                    {
                                                        <li class="cloudinary-thumbnail active" img-cloudinary="@imgId">
                                                            <img src="@("https://res.cloudinary.com/daaycakkk/image/upload/c_limit,h_60,w_90/v1587872991/" +imgId + ".jpg")">
                                                            <a href="#" class="cloudinary-delete">x</a>
                                                        </li>
                                                    }
                                                </ul>

                                            }

                                        </div>
                                    </div>
                                    <div class="col-lg-12 form-group">
                                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    @if (Model.GetThubnailIds().Length > 0)
                                    {
                                        foreach (var imgId in Model.GetThubnailIds())
                                        {
                                            <input type="hidden" name="thumbnails[]" data-cloudinary-public-id="@imgId" value="@("image/upload/v1587872991/" + imgId + ".jpg")">
                                        }
                                    }

                                    <div class="col-lg-12 form-group text-center">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Edit" class="btn btn-primary waves-effect waves-light" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script type="text/javascript">
    function showUploadWidget() {
        cloudinary.openUploadWidget({
            cloudName: "daaycakkk",
            uploadPreset: "hcgmdndc",
            sources: [
                "local",
                "url",
                "camera"
            ],
            form: ".product-form",
            fieldName: "thumbnails[]",
            thumbnails: '.uploaded',
            showAdvancedOptions: true,
            multiple: true,
        },
            (err, info) => {
                if (!err) {
                    console.log("Upload Widget event - ", info);
                }
            });
    }
    $('body').on('click', '.cloudinary-delete', function () {
        var splittedLink = $(this).prev().attr('src').split('/');
        var imgId = splittedLink[splittedLink.length - 1].split('.')[0];
        $(`input[data-cloudinary-public-id="${imgId}"]`).remove();
        $(`li[img-cloudinary="${imgId}"]`).remove();
    });
    document.getElementById("upload_widget").addEventListener("click", function(){
        showUploadWidget();
    }, false);
</script>

